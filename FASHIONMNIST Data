{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyM9wwfTtXn1E8QNWbDLpG4W",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NehaNeha417/DL_SHALA/blob/master/FASHIONMNIST%20Data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u_s23rh0X7oA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "2619bff2-b57f-428d-df4c-44a4816557f9"
      },
      "source": [
        "# import tensorflow module. check API varsion\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "\n",
        "print (tf.__version__)\n",
        "\n"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2.2.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kkUJiMRwZStI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "48fd6b40-4d6d-4a2f-d2d6-f51a0ab734e3"
      },
      "source": [
        "# grab the Fashion MNIST dataset (may take time the first time)\n",
        "print(\"[INFO] downloading Fashion MNIST...\")\n",
        "(trainData, trainLabels), (testData, testLabels) = tf.keras.datasets.fashion_mnist.load_data()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] downloading Fashion MNIST...\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "32768/29515 [=================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26427392/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "8192/5148 [===============================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4423680/4422102 [==============================] - 0s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i9C_drXwZSqQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# parameters for fashion MNIST Data set\n",
        "num_classes = 10\n",
        "image_width = 28\n",
        "image_height = 28\n",
        "image_channels = 1\n",
        "# define human readable class names\n",
        "class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat/jacket',\n",
        "               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J0yda9A7ZSmd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# shape the input data using \"channels last\" ordering\n",
        "# num_samples x rows x columns x depth\n",
        "trainData = trainData.reshape(\n",
        "        (trainData.shape[0], image_height, image_width, image_channels))\n",
        "testData = testData.reshape(\n",
        "        (testData.shape[0], image_height, image_width, image_channels))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y5J4U9qTZSkL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# convert to floating point and scale data to the range of [0.0, 1.0]\n",
        "trainData = trainData.astype(\"float32\") / 255.0\n",
        "testData = testData.astype(\"float32\") / 255.0"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3wC9xRNXZSgC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# pad the data to 32X32 for use in LeNet5 network\n",
        "trainData = np.pad(trainData, ((0,0),(2,2),(2,2),(0,0)), 'constant')\n",
        "testData = np.pad(testData, ((0,0),(2,2),(2,2),(0,0)), 'constant')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5gFrV2sVZSd8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "38a9449b-e821-4588-ab28-f10db16688d1"
      },
      "source": [
        "# display data dimentions\n",
        "print (\"trainData:\", trainData.shape)\n",
        "print (\"trainLabels:\", trainLabels.shape)\n",
        "print (\"testData:\", testData.shape)\n",
        "print (\"testLabels:\", testLabels.shape)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "trainData: (60000, 32, 32, 1)\n",
            "trainLabels: (60000,)\n",
            "testData: (10000, 32, 32, 1)\n",
            "testLabels: (10000,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pljMwORzaVPL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# parameters for training data set\n",
        "num_classes = 10\n",
        "image_width = 32\n",
        "image_height = 32\n",
        "image_channels = 1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HgUlEdjDaVGE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# import the necessary packages\n",
        "from tensorflow.keras import backend\n",
        "from tensorflow.keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "# define the model as a class\n",
        "class LeNet:\n",
        "    # INPUT => CONV => TANH => AVG-POOL => CONV => TANH => AVG-POOL => FC => TANH => FC => TANH => FC => SMAX\n",
        "    @staticmethod\n",
        "    def init(numChannels, imgRows, imgCols, numClasses, weightsPath=None):\n",
        "        # if we are using \"channels first\", update the input shape\n",
        "        if backend.image_data_format() == \"channels_first\":\n",
        "            inputShape = (numChannels, imgRows, imgCols)\n",
        "        else:  # \"channels last\"\n",
        "            inputShape = (imgRows, imgCols, numChannels)\n",
        "\n",
        "        # initialize the model\n",
        "        model = models.Sequential()\n",
        "\n",
        "        # define the first set of CONV => ACTIVATION => POOL layers\n",
        "        model.add(layers.Conv2D(filters=6, kernel_size=(5, 5), strides=(1, 1),\n",
        "                padding=\"valid\", activation=tf.nn.tanh, input_shape=inputShape))\n",
        "        model.add(layers.AveragePooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
        "\n",
        "        # define the second set of CONV => ACTIVATION => POOL layers\n",
        "        model.add(layers.Conv2D(filters=16, kernel_size=(5, 5), strides=(1, 1),\n",
        "                padding=\"valid\", activation=tf.nn.tanh))\n",
        "        model.add(layers.AveragePooling2D(pool_size=(2, 2), strides=(2, 2)))\n",
        "\n",
        "        # flatten the convolution volume to fully connected layers\n",
        "        model.add(layers.Flatten())\n",
        "\n",
        "        # define the first FC => ACTIVATION layers\n",
        "        model.add(layers.Dense(units=120, activation=tf.nn.tanh))\n",
        "\n",
        "        # define the second FC => ACTIVATION layers\n",
        "        model.add(layers.Dense(units=84, activation=tf.nn.tanh))\n",
        "\n",
        "        # lastly, define the soft-max classifier\n",
        "        model.add(layers.Dense(units=numClasses, activation=tf.nn.softmax))\n",
        "         # if a weights path is supplied (inicating that the model was\n",
        "        # pre-trained), then load the weights\n",
        "        if weightsPath is not None:\n",
        "            model.load_weights(weightsPath)\n",
        "\n",
        "        # return the constructed network architecture\n",
        "        return model"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0HFz_l-saVCe",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "outputId": "2ecb394b-1e87-4bfe-f8ca-347393547337"
      },
      "source": [
        "# initialize the model\n",
        "print(\"[INFO] compiling model...\")\n",
        "model = LeNet.init(numChannels=image_channels,\n",
        "                    imgRows=image_height, imgCols=image_width,\n",
        "                    numClasses=num_classes,\n",
        "                    weightsPath=None)\n",
        "\n",
        "# compile the model\n",
        "model.compile(optimizer=tf.keras.optimizers.SGD(lr=0.01),  # Stochastic Gradient Descent\n",
        "        loss=\"sparse_categorical_crossentropy\",\n",
        "        metrics=[\"accuracy\"])\n",
        "\n",
        "# print model summary\n",
        "model.summary()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] compiling model...\n",
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d (Conv2D)              (None, 28, 28, 6)         156       \n",
            "_________________________________________________________________\n",
            "average_pooling2d (AveragePo (None, 14, 14, 6)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 10, 10, 16)        2416      \n",
            "_________________________________________________________________\n",
            "average_pooling2d_1 (Average (None, 5, 5, 16)          0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 400)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 120)               48120     \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 84)                10164     \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 10)                850       \n",
            "=================================================================\n",
            "Total params: 61,706\n",
            "Trainable params: 61,706\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bixc-t_AaU_N",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 714
        },
        "outputId": "a2534350-989a-4764-82b7-977ba0fb6c68"
      },
      "source": [
        "# define callback function for training termination criteria\n",
        "#accuracy_cutoff = 0.99\n",
        "class myCallback(tf.keras.callbacks.Callback):\n",
        "  def on_epoch_end(self, epoch, logs=None):\n",
        "    if(logs.get('accuracy') > 0.95):\n",
        "      print(\"\\nReached 95% accuracy so cancelling training!\")\n",
        "      self.model.stop_training = True\n",
        "\n",
        "# initialize training config\n",
        "batch_size = 128\n",
        "epochs = 20\n",
        "\n",
        "# run training\n",
        "print(\"[INFO] training...\")\n",
        "history = model.fit(x=trainData, y=trainLabels, validation_data=(testData, testLabels),\n",
        "        batch_size=batch_size, epochs=epochs, verbose=1, callbacks=[myCallback()])"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] training...\n",
            "Epoch 1/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.3025 - accuracy: 0.1032 - val_loss: 2.3025 - val_accuracy: 0.1000\n",
            "Epoch 2/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.3024 - accuracy: 0.1041 - val_loss: 2.3022 - val_accuracy: 0.1000\n",
            "Epoch 3/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.3022 - accuracy: 0.1041 - val_loss: 2.3019 - val_accuracy: 0.1000\n",
            "Epoch 4/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.3019 - accuracy: 0.1071 - val_loss: 2.3016 - val_accuracy: 0.1000\n",
            "Epoch 5/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.3016 - accuracy: 0.1126 - val_loss: 2.3012 - val_accuracy: 0.1007\n",
            "Epoch 6/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.3013 - accuracy: 0.1137 - val_loss: 2.3009 - val_accuracy: 0.1000\n",
            "Epoch 7/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.3008 - accuracy: 0.1156 - val_loss: 2.3006 - val_accuracy: 0.1111\n",
            "Epoch 8/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.3004 - accuracy: 0.1186 - val_loss: 2.3000 - val_accuracy: 0.1000\n",
            "Epoch 9/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.2997 - accuracy: 0.1187 - val_loss: 2.2990 - val_accuracy: 0.0994\n",
            "Epoch 10/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.2988 - accuracy: 0.1393 - val_loss: 2.2979 - val_accuracy: 0.1781\n",
            "Epoch 11/20\n",
            "469/469 [==============================] - 30s 63ms/step - loss: 2.2975 - accuracy: 0.1431 - val_loss: 2.2964 - val_accuracy: 0.1009\n",
            "Epoch 12/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.2957 - accuracy: 0.1583 - val_loss: 2.2946 - val_accuracy: 0.1000\n",
            "Epoch 13/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.2930 - accuracy: 0.1687 - val_loss: 2.2906 - val_accuracy: 0.2483\n",
            "Epoch 14/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.2887 - accuracy: 0.1830 - val_loss: 2.2849 - val_accuracy: 0.2783\n",
            "Epoch 15/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.2811 - accuracy: 0.1887 - val_loss: 2.2763 - val_accuracy: 0.1930\n",
            "Epoch 16/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.2683 - accuracy: 0.2348 - val_loss: 2.2711 - val_accuracy: 0.2009\n",
            "Epoch 17/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.2519 - accuracy: 0.2242 - val_loss: 2.2888 - val_accuracy: 0.1000\n",
            "Epoch 18/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.2166 - accuracy: 0.2489 - val_loss: 2.1601 - val_accuracy: 0.3664\n",
            "Epoch 19/20\n",
            "469/469 [==============================] - 30s 64ms/step - loss: 2.1028 - accuracy: 0.3058 - val_loss: 1.9530 - val_accuracy: 0.4415\n",
            "Epoch 20/20\n",
            "469/469 [==============================] - 30s 63ms/step - loss: 1.8009 - accuracy: 0.3829 - val_loss: 1.6848 - val_accuracy: 0.3413\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1zakfa5YaU78",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "outputId": "0a96839f-c8cf-41ca-becf-b45883de1cca"
      },
      "source": [
        "\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# retrieve a list of list results on training and test data sets for each training epoch\n",
        "acc      = history.history['accuracy']\n",
        "val_acc  = history.history['val_accuracy']\n",
        "loss     = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs   = range(len(acc)) # get number of epochs\n",
        "\n",
        "# plot training and validation accuracy per epoch\n",
        "plt.plot(epochs, acc, label='train accuracy')\n",
        "plt.plot(epochs, val_acc, label='val accuracy')\n",
        "plt.xlabel('epochs')\n",
        "plt.ylabel('accuracy')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.figure()\n",
        "\n",
        "# plot training and validation loss per epoch\n",
        "plt.plot(epochs, loss, label='train loss')\n",
        "plt.plot(epochs, val_loss, label='val loss')\n",
        "plt.xlabel('epochs')\n",
        "plt.ylabel('loss')\n",
        "plt.legend(loc=\"upper right\")\n",
        "plt.title('Training and validation loss')"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Training and validation loss')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EvmuUivXa59g",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "ac3611fb-0741-4ba5-db7f-8ebcc42eceb9"
      },
      "source": [
        "# show the accuracy on the testing set\n",
        "print(\"[INFO] evaluating...\")\n",
        "(loss, accuracy) = model.evaluate(testData, testLabels,\n",
        "                                  batch_size=batch_size, verbose=1)\n",
        "print(\"[INFO] accuracy: {:.2f}%\".format(accuracy * 100))"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating...\n",
            "79/79 [==============================] - 2s 26ms/step - loss: 1.6848 - accuracy: 0.3413\n",
            "[INFO] accuracy: 34.13%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F7UkXIE9a56j",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "outputId": "bab9f0e6-e741-4383-96c6-7b2943ca1e41"
      },
      "source": [
        "model.save_weights(\"weights/LeNetFashionMNIST.temp.hdf5\", overwrite=True)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "error",
          "ename": "OSError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-ebbaf320d1c3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_weights\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"weights/LeNetFashionMNIST.temp.hdf5\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moverwrite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/network.py\u001b[0m in \u001b[0;36msave_weights\u001b[0;34m(self, filepath, overwrite, save_format)\u001b[0m\n\u001b[1;32m   1148\u001b[0m         \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1149\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msave_format\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'h5'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1150\u001b[0;31m       \u001b[0;32mwith\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1151\u001b[0m         \u001b[0mhdf5_format\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_weights_to_hdf5_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1152\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, **kwds)\u001b[0m\n\u001b[1;32m    406\u001b[0m                 fid = make_fid(name, mode, userblock_size,\n\u001b[1;32m    407\u001b[0m                                \u001b[0mfapl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfcpl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmake_fcpl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrack_order\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack_order\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 408\u001b[0;31m                                swmr=swmr)\n\u001b[0m\u001b[1;32m    409\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    410\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlibver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_EXCL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfcpl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfcpl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    178\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 179\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_TRUNC\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfcpl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfcpl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    180\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'a'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m         \u001b[0;31m# Open in append mode (read/write).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mh5py/h5f.pyx\u001b[0m in \u001b[0;36mh5py.h5f.create\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mOSError\u001b[0m: Unable to create file (unable to open file: name = 'weights/LeNetFashionMNIST.temp.hdf5', errno = 2, error message = 'No such file or directory', flags = 13, o_flags = 242)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dXcSJjata50x",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# init model and load the model weights\n",
        "print(\"[INFO] compiling model...\")\n",
        "model = LeNet.init(numChannels=image_channels, \n",
        "                    imgRows=image_height, imgCols=image_width,\n",
        "                    numClasses=num_classes,\n",
        "                    weightsPath=\"weights/LeNetFashionMNIST.hdf5\")\n",
        "\n",
        "# compile the model\n",
        "model.compile(optimizer=tf.keras.optimizers.SGD(lr=0.01),  # Stochastic Gradient Descent\n",
        "        loss=\"sparse_categorical_crossentropy\",\n",
        "        metrics=[\"accuracy\"])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l_UGrApKbH66",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# show the accuracy on the testing set\n",
        "print(\"[INFO] evaluating...\")\n",
        "batch_size = 128\n",
        "(loss, accuracy) = model.evaluate(testData, testLabels,\n",
        "                                  batch_size=batch_size, verbose=1)\n",
        "print(\"[INFO] accuracy: {:.2f}%\".format(accuracy * 100))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IaB9ne2RbH2v",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "outputId": "cf325d4d-cde4-48ed-c1a7-ef184580255f"
      },
      "source": [
        "%matplotlib inline\n",
        "import numpy as np\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# set up matplotlib fig, and size it to fit 3x4 pics\n",
        "nrows = 3\n",
        "ncols = 4\n",
        "fig = plt.gcf()\n",
        "fig.set_size_inches(ncols*4, nrows*4)\n",
        "\n",
        "# randomly select a few testing digits\n",
        "num_predictions = 12\n",
        "test_indices = np.random.choice(np.arange(0, len(testLabels)), size=(num_predictions,))\n",
        "test_images = np.stack(([testData[i] for i in test_indices]))\n",
        "test_labels = np.stack(([testLabels[i] for i in test_indices]))\n",
        "\n",
        "# compute predictions\n",
        "predictions = model.predict(test_images)\n",
        "\n",
        "for i in range(num_predictions):\n",
        "    # select the most probable class\n",
        "    prediction = np.argmax(predictions[i])\n",
        "\n",
        "    # rescale the test image\n",
        "    image = (test_images[i] * 255).astype(\"uint8\")\n",
        "\n",
        "    # resize the image from a 28 x 28 image to a 96 x 96 image so we can better see it\n",
        "    image = cv2.resize(image, (96, 96), interpolation=cv2.INTER_CUBIC)\n",
        "    # convert grayscale image to RGB color\n",
        "    image = cv2.merge([image] * 3)\n",
        "\n",
        "    # select prediction text color\n",
        "    if prediction == test_labels[i]:\n",
        "        rgb_color = (0, 255, 0) # green for correct predictions\n",
        "    else:\n",
        "        rgb_color = (255, 0, 0) # red for wrong predictions\n",
        "\n",
        "    # show the image and prediction\n",
        "    cv2.putText(image, str(class_names[prediction]), (0, 10),\n",
        "                cv2.FONT_HERSHEY_SIMPLEX, 0.5, rgb_color, 1)\n",
        "    \n",
        "    # set up subplot; subplot indices start at 1\n",
        "    sp = plt.subplot(nrows, ncols, i + 1, title=\"label: %s\" % class_names[test_labels[i]])\n",
        "    sp.axis('Off') # don't show axes (or gridlines)\n",
        "    plt.imshow(image)\n",
        "\n",
        "# show figure matrix\n",
        "plt.show()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x864 with 12 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VZILqhU0bHyE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}